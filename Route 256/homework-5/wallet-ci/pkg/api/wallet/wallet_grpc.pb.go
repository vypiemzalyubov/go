// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: wallet/wallet.proto

package wallet

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Wallet_CreateUser_FullMethodName            = "/wallet.Wallet/CreateUser"
	Wallet_CollectOperation_FullMethodName      = "/wallet.Wallet/CollectOperation"
	Wallet_ForceCollectOperation_FullMethodName = "/wallet.Wallet/ForceCollectOperation"
	Wallet_UpgradeUser_FullMethodName           = "/wallet.Wallet/UpgradeUser"
	Wallet_GetUser_FullMethodName               = "/wallet.Wallet/GetUser"
	Wallet_LogIn_FullMethodName                 = "/wallet.Wallet/LogIn"
	Wallet_CreateAccount_FullMethodName         = "/wallet.Wallet/CreateAccount"
	Wallet_GetAccountBalance_FullMethodName     = "/wallet.Wallet/GetAccountBalance"
	Wallet_Debit_FullMethodName                 = "/wallet.Wallet/Debit"
	Wallet_Credit_FullMethodName                = "/wallet.Wallet/Credit"
	Wallet_Produce_FullMethodName               = "/wallet.Wallet/Produce"
	Wallet_Consume_FullMethodName               = "/wallet.Wallet/Consume"
	Wallet_GetExchangeRates_FullMethodName      = "/wallet.Wallet/GetExchangeRates"
)

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletClient interface {
	// Создать пользователя
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// CollectOperation сбор количества операций в системе
	CollectOperation(ctx context.Context, in *OperationCountRequest, opts ...grpc.CallOption) (*OperationCountResponse, error)
	// ForceCollectOperation запуск сбора в обход работы воркера
	ForceCollectOperation(ctx context.Context, in *OperationCountRequest, opts ...grpc.CallOption) (*ForceOperationCountResponse, error)
	// Повысить уровень идентификации пользователя
	UpgradeUser(ctx context.Context, in *UpgradeUserRequest, opts ...grpc.CallOption) (*UpgradeUserResponse, error)
	// Получить инфу по пользователю
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Авторизация
	LogIn(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInResponse, error)
	// Создать счет
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// Получить инфу по балансу
	GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*AccountBalanceResponse, error)
	// Поступление денег
	Debit(ctx context.Context, in *DebitRequest, opts ...grpc.CallOption) (*DebitResponse, error)
	// Списание денег
	Credit(ctx context.Context, in *CreditRequest, opts ...grpc.CallOption) (*CreditResponse, error)
	// Создаёт kafka сообщение на операцию с кошельком с внешним ID
	Produce(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceResponse, error)
	// Создаёт kafka сообщение на операцию с кошельком с внешним ID
	Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*ConsumeResponse, error)
	// Ходит на сайт cbr.ru и возвращает курсы валют
	GetExchangeRates(ctx context.Context, in *GetExchangeRatesRequest, opts ...grpc.CallOption) (*GetExchangeRatesResponse, error)
}

type walletClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletClient(cc grpc.ClientConnInterface) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, Wallet_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CollectOperation(ctx context.Context, in *OperationCountRequest, opts ...grpc.CallOption) (*OperationCountResponse, error) {
	out := new(OperationCountResponse)
	err := c.cc.Invoke(ctx, Wallet_CollectOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ForceCollectOperation(ctx context.Context, in *OperationCountRequest, opts ...grpc.CallOption) (*ForceOperationCountResponse, error) {
	out := new(ForceOperationCountResponse)
	err := c.cc.Invoke(ctx, Wallet_ForceCollectOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpgradeUser(ctx context.Context, in *UpgradeUserRequest, opts ...grpc.CallOption) (*UpgradeUserResponse, error) {
	out := new(UpgradeUserResponse)
	err := c.cc.Invoke(ctx, Wallet_UpgradeUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, Wallet_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) LogIn(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInResponse, error) {
	out := new(LogInResponse)
	err := c.cc.Invoke(ctx, Wallet_LogIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, Wallet_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*AccountBalanceResponse, error) {
	out := new(AccountBalanceResponse)
	err := c.cc.Invoke(ctx, Wallet_GetAccountBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) Debit(ctx context.Context, in *DebitRequest, opts ...grpc.CallOption) (*DebitResponse, error) {
	out := new(DebitResponse)
	err := c.cc.Invoke(ctx, Wallet_Debit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) Credit(ctx context.Context, in *CreditRequest, opts ...grpc.CallOption) (*CreditResponse, error) {
	out := new(CreditResponse)
	err := c.cc.Invoke(ctx, Wallet_Credit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) Produce(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceResponse, error) {
	out := new(ProduceResponse)
	err := c.cc.Invoke(ctx, Wallet_Produce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*ConsumeResponse, error) {
	out := new(ConsumeResponse)
	err := c.cc.Invoke(ctx, Wallet_Consume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetExchangeRates(ctx context.Context, in *GetExchangeRatesRequest, opts ...grpc.CallOption) (*GetExchangeRatesResponse, error) {
	out := new(GetExchangeRatesResponse)
	err := c.cc.Invoke(ctx, Wallet_GetExchangeRates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
// All implementations must embed UnimplementedWalletServer
// for forward compatibility
type WalletServer interface {
	// Создать пользователя
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// CollectOperation сбор количества операций в системе
	CollectOperation(context.Context, *OperationCountRequest) (*OperationCountResponse, error)
	// ForceCollectOperation запуск сбора в обход работы воркера
	ForceCollectOperation(context.Context, *OperationCountRequest) (*ForceOperationCountResponse, error)
	// Повысить уровень идентификации пользователя
	UpgradeUser(context.Context, *UpgradeUserRequest) (*UpgradeUserResponse, error)
	// Получить инфу по пользователю
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Авторизация
	LogIn(context.Context, *LogInRequest) (*LogInResponse, error)
	// Создать счет
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// Получить инфу по балансу
	GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*AccountBalanceResponse, error)
	// Поступление денег
	Debit(context.Context, *DebitRequest) (*DebitResponse, error)
	// Списание денег
	Credit(context.Context, *CreditRequest) (*CreditResponse, error)
	// Создаёт kafka сообщение на операцию с кошельком с внешним ID
	Produce(context.Context, *ProduceRequest) (*ProduceResponse, error)
	// Создаёт kafka сообщение на операцию с кошельком с внешним ID
	Consume(context.Context, *ConsumeRequest) (*ConsumeResponse, error)
	// Ходит на сайт cbr.ru и возвращает курсы валют
	GetExchangeRates(context.Context, *GetExchangeRatesRequest) (*GetExchangeRatesResponse, error)
	mustEmbedUnimplementedWalletServer()
}

// UnimplementedWalletServer must be embedded to have forward compatible implementations.
type UnimplementedWalletServer struct {
}

func (UnimplementedWalletServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedWalletServer) CollectOperation(context.Context, *OperationCountRequest) (*OperationCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectOperation not implemented")
}
func (UnimplementedWalletServer) ForceCollectOperation(context.Context, *OperationCountRequest) (*ForceOperationCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceCollectOperation not implemented")
}
func (UnimplementedWalletServer) UpgradeUser(context.Context, *UpgradeUserRequest) (*UpgradeUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeUser not implemented")
}
func (UnimplementedWalletServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedWalletServer) LogIn(context.Context, *LogInRequest) (*LogInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogIn not implemented")
}
func (UnimplementedWalletServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedWalletServer) GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*AccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}
func (UnimplementedWalletServer) Debit(context.Context, *DebitRequest) (*DebitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Debit not implemented")
}
func (UnimplementedWalletServer) Credit(context.Context, *CreditRequest) (*CreditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Credit not implemented")
}
func (UnimplementedWalletServer) Produce(context.Context, *ProduceRequest) (*ProduceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Produce not implemented")
}
func (UnimplementedWalletServer) Consume(context.Context, *ConsumeRequest) (*ConsumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (UnimplementedWalletServer) GetExchangeRates(context.Context, *GetExchangeRatesRequest) (*GetExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeRates not implemented")
}
func (UnimplementedWalletServer) mustEmbedUnimplementedWalletServer() {}

// UnsafeWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServer will
// result in compilation errors.
type UnsafeWalletServer interface {
	mustEmbedUnimplementedWalletServer()
}

func RegisterWalletServer(s grpc.ServiceRegistrar, srv WalletServer) {
	s.RegisterService(&Wallet_ServiceDesc, srv)
}

func _Wallet_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CollectOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CollectOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CollectOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CollectOperation(ctx, req.(*OperationCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ForceCollectOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ForceCollectOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ForceCollectOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ForceCollectOperation(ctx, req.(*OperationCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpgradeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpgradeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UpgradeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpgradeUser(ctx, req.(*UpgradeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_LogIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).LogIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_LogIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).LogIn(ctx, req.(*LogInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetAccountBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccountBalance(ctx, req.(*GetAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_Debit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).Debit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_Debit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).Debit(ctx, req.(*DebitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_Credit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).Credit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_Credit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).Credit(ctx, req.(*CreditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_Produce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).Produce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_Produce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).Produce(ctx, req.(*ProduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_Consume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).Consume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_Consume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).Consume(ctx, req.(*ConsumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetExchangeRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetExchangeRates(ctx, req.(*GetExchangeRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Wallet_ServiceDesc is the grpc.ServiceDesc for Wallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Wallet_CreateUser_Handler,
		},
		{
			MethodName: "CollectOperation",
			Handler:    _Wallet_CollectOperation_Handler,
		},
		{
			MethodName: "ForceCollectOperation",
			Handler:    _Wallet_ForceCollectOperation_Handler,
		},
		{
			MethodName: "UpgradeUser",
			Handler:    _Wallet_UpgradeUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Wallet_GetUser_Handler,
		},
		{
			MethodName: "LogIn",
			Handler:    _Wallet_LogIn_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Wallet_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccountBalance",
			Handler:    _Wallet_GetAccountBalance_Handler,
		},
		{
			MethodName: "Debit",
			Handler:    _Wallet_Debit_Handler,
		},
		{
			MethodName: "Credit",
			Handler:    _Wallet_Credit_Handler,
		},
		{
			MethodName: "Produce",
			Handler:    _Wallet_Produce_Handler,
		},
		{
			MethodName: "Consume",
			Handler:    _Wallet_Consume_Handler,
		},
		{
			MethodName: "GetExchangeRates",
			Handler:    _Wallet_GetExchangeRates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet/wallet.proto",
}
