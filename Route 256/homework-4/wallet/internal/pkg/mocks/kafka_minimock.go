// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mocks

//go:generate minimock -i gitlab.ozon.dev/route256/wallet/internal/pkg/kafka.KafkaClient -o kafka_minimock.go -n KafkaClientMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/segmentio/kafka-go"
	mm_kafka "gitlab.ozon.dev/route256/wallet/internal/pkg/kafka"
)

// KafkaClientMock implements mm_kafka.KafkaClient
type KafkaClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcConsumeMessages          func(ctx context.Context)
	funcConsumeMessagesOrigin    string
	inspectFuncConsumeMessages   func(ctx context.Context)
	afterConsumeMessagesCounter  uint64
	beforeConsumeMessagesCounter uint64
	ConsumeMessagesMock          mKafkaClientMockConsumeMessages

	funcGetConsumedMessages          func() (mp1 *mm_kafka.MessageStore)
	funcGetConsumedMessagesOrigin    string
	inspectFuncGetConsumedMessages   func()
	afterGetConsumedMessagesCounter  uint64
	beforeGetConsumedMessagesCounter uint64
	GetConsumedMessagesMock          mKafkaClientMockGetConsumedMessages

	funcProduceMessages          func(ctx context.Context, messages ...kafka.Message) (err error)
	funcProduceMessagesOrigin    string
	inspectFuncProduceMessages   func(ctx context.Context, messages ...kafka.Message)
	afterProduceMessagesCounter  uint64
	beforeProduceMessagesCounter uint64
	ProduceMessagesMock          mKafkaClientMockProduceMessages
}

// NewKafkaClientMock returns a mock for mm_kafka.KafkaClient
func NewKafkaClientMock(t minimock.Tester) *KafkaClientMock {
	m := &KafkaClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ConsumeMessagesMock = mKafkaClientMockConsumeMessages{mock: m}
	m.ConsumeMessagesMock.callArgs = []*KafkaClientMockConsumeMessagesParams{}

	m.GetConsumedMessagesMock = mKafkaClientMockGetConsumedMessages{mock: m}

	m.ProduceMessagesMock = mKafkaClientMockProduceMessages{mock: m}
	m.ProduceMessagesMock.callArgs = []*KafkaClientMockProduceMessagesParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mKafkaClientMockConsumeMessages struct {
	optional           bool
	mock               *KafkaClientMock
	defaultExpectation *KafkaClientMockConsumeMessagesExpectation
	expectations       []*KafkaClientMockConsumeMessagesExpectation

	callArgs []*KafkaClientMockConsumeMessagesParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// KafkaClientMockConsumeMessagesExpectation specifies expectation struct of the KafkaClient.ConsumeMessages
type KafkaClientMockConsumeMessagesExpectation struct {
	mock               *KafkaClientMock
	params             *KafkaClientMockConsumeMessagesParams
	paramPtrs          *KafkaClientMockConsumeMessagesParamPtrs
	expectationOrigins KafkaClientMockConsumeMessagesExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// KafkaClientMockConsumeMessagesParams contains parameters of the KafkaClient.ConsumeMessages
type KafkaClientMockConsumeMessagesParams struct {
	ctx context.Context
}

// KafkaClientMockConsumeMessagesParamPtrs contains pointers to parameters of the KafkaClient.ConsumeMessages
type KafkaClientMockConsumeMessagesParamPtrs struct {
	ctx *context.Context
}

// KafkaClientMockConsumeMessagesOrigins contains origins of expectations of the KafkaClient.ConsumeMessages
type KafkaClientMockConsumeMessagesExpectationOrigins struct {
	origin    string
	originCtx string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmConsumeMessages *mKafkaClientMockConsumeMessages) Optional() *mKafkaClientMockConsumeMessages {
	mmConsumeMessages.optional = true
	return mmConsumeMessages
}

// Expect sets up expected params for KafkaClient.ConsumeMessages
func (mmConsumeMessages *mKafkaClientMockConsumeMessages) Expect(ctx context.Context) *mKafkaClientMockConsumeMessages {
	if mmConsumeMessages.mock.funcConsumeMessages != nil {
		mmConsumeMessages.mock.t.Fatalf("KafkaClientMock.ConsumeMessages mock is already set by Set")
	}

	if mmConsumeMessages.defaultExpectation == nil {
		mmConsumeMessages.defaultExpectation = &KafkaClientMockConsumeMessagesExpectation{}
	}

	if mmConsumeMessages.defaultExpectation.paramPtrs != nil {
		mmConsumeMessages.mock.t.Fatalf("KafkaClientMock.ConsumeMessages mock is already set by ExpectParams functions")
	}

	mmConsumeMessages.defaultExpectation.params = &KafkaClientMockConsumeMessagesParams{ctx}
	mmConsumeMessages.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmConsumeMessages.expectations {
		if minimock.Equal(e.params, mmConsumeMessages.defaultExpectation.params) {
			mmConsumeMessages.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmConsumeMessages.defaultExpectation.params)
		}
	}

	return mmConsumeMessages
}

// ExpectCtxParam1 sets up expected param ctx for KafkaClient.ConsumeMessages
func (mmConsumeMessages *mKafkaClientMockConsumeMessages) ExpectCtxParam1(ctx context.Context) *mKafkaClientMockConsumeMessages {
	if mmConsumeMessages.mock.funcConsumeMessages != nil {
		mmConsumeMessages.mock.t.Fatalf("KafkaClientMock.ConsumeMessages mock is already set by Set")
	}

	if mmConsumeMessages.defaultExpectation == nil {
		mmConsumeMessages.defaultExpectation = &KafkaClientMockConsumeMessagesExpectation{}
	}

	if mmConsumeMessages.defaultExpectation.params != nil {
		mmConsumeMessages.mock.t.Fatalf("KafkaClientMock.ConsumeMessages mock is already set by Expect")
	}

	if mmConsumeMessages.defaultExpectation.paramPtrs == nil {
		mmConsumeMessages.defaultExpectation.paramPtrs = &KafkaClientMockConsumeMessagesParamPtrs{}
	}
	mmConsumeMessages.defaultExpectation.paramPtrs.ctx = &ctx
	mmConsumeMessages.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmConsumeMessages
}

// Inspect accepts an inspector function that has same arguments as the KafkaClient.ConsumeMessages
func (mmConsumeMessages *mKafkaClientMockConsumeMessages) Inspect(f func(ctx context.Context)) *mKafkaClientMockConsumeMessages {
	if mmConsumeMessages.mock.inspectFuncConsumeMessages != nil {
		mmConsumeMessages.mock.t.Fatalf("Inspect function is already set for KafkaClientMock.ConsumeMessages")
	}

	mmConsumeMessages.mock.inspectFuncConsumeMessages = f

	return mmConsumeMessages
}

// Return sets up results that will be returned by KafkaClient.ConsumeMessages
func (mmConsumeMessages *mKafkaClientMockConsumeMessages) Return() *KafkaClientMock {
	if mmConsumeMessages.mock.funcConsumeMessages != nil {
		mmConsumeMessages.mock.t.Fatalf("KafkaClientMock.ConsumeMessages mock is already set by Set")
	}

	if mmConsumeMessages.defaultExpectation == nil {
		mmConsumeMessages.defaultExpectation = &KafkaClientMockConsumeMessagesExpectation{mock: mmConsumeMessages.mock}
	}

	mmConsumeMessages.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmConsumeMessages.mock
}

// Set uses given function f to mock the KafkaClient.ConsumeMessages method
func (mmConsumeMessages *mKafkaClientMockConsumeMessages) Set(f func(ctx context.Context)) *KafkaClientMock {
	if mmConsumeMessages.defaultExpectation != nil {
		mmConsumeMessages.mock.t.Fatalf("Default expectation is already set for the KafkaClient.ConsumeMessages method")
	}

	if len(mmConsumeMessages.expectations) > 0 {
		mmConsumeMessages.mock.t.Fatalf("Some expectations are already set for the KafkaClient.ConsumeMessages method")
	}

	mmConsumeMessages.mock.funcConsumeMessages = f
	mmConsumeMessages.mock.funcConsumeMessagesOrigin = minimock.CallerInfo(1)
	return mmConsumeMessages.mock
}

// Times sets number of times KafkaClient.ConsumeMessages should be invoked
func (mmConsumeMessages *mKafkaClientMockConsumeMessages) Times(n uint64) *mKafkaClientMockConsumeMessages {
	if n == 0 {
		mmConsumeMessages.mock.t.Fatalf("Times of KafkaClientMock.ConsumeMessages mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmConsumeMessages.expectedInvocations, n)
	mmConsumeMessages.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmConsumeMessages
}

func (mmConsumeMessages *mKafkaClientMockConsumeMessages) invocationsDone() bool {
	if len(mmConsumeMessages.expectations) == 0 && mmConsumeMessages.defaultExpectation == nil && mmConsumeMessages.mock.funcConsumeMessages == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmConsumeMessages.mock.afterConsumeMessagesCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmConsumeMessages.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ConsumeMessages implements mm_kafka.KafkaClient
func (mmConsumeMessages *KafkaClientMock) ConsumeMessages(ctx context.Context) {
	mm_atomic.AddUint64(&mmConsumeMessages.beforeConsumeMessagesCounter, 1)
	defer mm_atomic.AddUint64(&mmConsumeMessages.afterConsumeMessagesCounter, 1)

	mmConsumeMessages.t.Helper()

	if mmConsumeMessages.inspectFuncConsumeMessages != nil {
		mmConsumeMessages.inspectFuncConsumeMessages(ctx)
	}

	mm_params := KafkaClientMockConsumeMessagesParams{ctx}

	// Record call args
	mmConsumeMessages.ConsumeMessagesMock.mutex.Lock()
	mmConsumeMessages.ConsumeMessagesMock.callArgs = append(mmConsumeMessages.ConsumeMessagesMock.callArgs, &mm_params)
	mmConsumeMessages.ConsumeMessagesMock.mutex.Unlock()

	for _, e := range mmConsumeMessages.ConsumeMessagesMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmConsumeMessages.ConsumeMessagesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmConsumeMessages.ConsumeMessagesMock.defaultExpectation.Counter, 1)
		mm_want := mmConsumeMessages.ConsumeMessagesMock.defaultExpectation.params
		mm_want_ptrs := mmConsumeMessages.ConsumeMessagesMock.defaultExpectation.paramPtrs

		mm_got := KafkaClientMockConsumeMessagesParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmConsumeMessages.t.Errorf("KafkaClientMock.ConsumeMessages got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmConsumeMessages.ConsumeMessagesMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmConsumeMessages.t.Errorf("KafkaClientMock.ConsumeMessages got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmConsumeMessages.ConsumeMessagesMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmConsumeMessages.funcConsumeMessages != nil {
		mmConsumeMessages.funcConsumeMessages(ctx)
		return
	}
	mmConsumeMessages.t.Fatalf("Unexpected call to KafkaClientMock.ConsumeMessages. %v", ctx)

}

// ConsumeMessagesAfterCounter returns a count of finished KafkaClientMock.ConsumeMessages invocations
func (mmConsumeMessages *KafkaClientMock) ConsumeMessagesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConsumeMessages.afterConsumeMessagesCounter)
}

// ConsumeMessagesBeforeCounter returns a count of KafkaClientMock.ConsumeMessages invocations
func (mmConsumeMessages *KafkaClientMock) ConsumeMessagesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConsumeMessages.beforeConsumeMessagesCounter)
}

// Calls returns a list of arguments used in each call to KafkaClientMock.ConsumeMessages.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmConsumeMessages *mKafkaClientMockConsumeMessages) Calls() []*KafkaClientMockConsumeMessagesParams {
	mmConsumeMessages.mutex.RLock()

	argCopy := make([]*KafkaClientMockConsumeMessagesParams, len(mmConsumeMessages.callArgs))
	copy(argCopy, mmConsumeMessages.callArgs)

	mmConsumeMessages.mutex.RUnlock()

	return argCopy
}

// MinimockConsumeMessagesDone returns true if the count of the ConsumeMessages invocations corresponds
// the number of defined expectations
func (m *KafkaClientMock) MinimockConsumeMessagesDone() bool {
	if m.ConsumeMessagesMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ConsumeMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ConsumeMessagesMock.invocationsDone()
}

// MinimockConsumeMessagesInspect logs each unmet expectation
func (m *KafkaClientMock) MinimockConsumeMessagesInspect() {
	for _, e := range m.ConsumeMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to KafkaClientMock.ConsumeMessages at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterConsumeMessagesCounter := mm_atomic.LoadUint64(&m.afterConsumeMessagesCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ConsumeMessagesMock.defaultExpectation != nil && afterConsumeMessagesCounter < 1 {
		if m.ConsumeMessagesMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to KafkaClientMock.ConsumeMessages at\n%s", m.ConsumeMessagesMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to KafkaClientMock.ConsumeMessages at\n%s with params: %#v", m.ConsumeMessagesMock.defaultExpectation.expectationOrigins.origin, *m.ConsumeMessagesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConsumeMessages != nil && afterConsumeMessagesCounter < 1 {
		m.t.Errorf("Expected call to KafkaClientMock.ConsumeMessages at\n%s", m.funcConsumeMessagesOrigin)
	}

	if !m.ConsumeMessagesMock.invocationsDone() && afterConsumeMessagesCounter > 0 {
		m.t.Errorf("Expected %d calls to KafkaClientMock.ConsumeMessages at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ConsumeMessagesMock.expectedInvocations), m.ConsumeMessagesMock.expectedInvocationsOrigin, afterConsumeMessagesCounter)
	}
}

type mKafkaClientMockGetConsumedMessages struct {
	optional           bool
	mock               *KafkaClientMock
	defaultExpectation *KafkaClientMockGetConsumedMessagesExpectation
	expectations       []*KafkaClientMockGetConsumedMessagesExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// KafkaClientMockGetConsumedMessagesExpectation specifies expectation struct of the KafkaClient.GetConsumedMessages
type KafkaClientMockGetConsumedMessagesExpectation struct {
	mock *KafkaClientMock

	results      *KafkaClientMockGetConsumedMessagesResults
	returnOrigin string
	Counter      uint64
}

// KafkaClientMockGetConsumedMessagesResults contains results of the KafkaClient.GetConsumedMessages
type KafkaClientMockGetConsumedMessagesResults struct {
	mp1 *mm_kafka.MessageStore
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetConsumedMessages *mKafkaClientMockGetConsumedMessages) Optional() *mKafkaClientMockGetConsumedMessages {
	mmGetConsumedMessages.optional = true
	return mmGetConsumedMessages
}

// Expect sets up expected params for KafkaClient.GetConsumedMessages
func (mmGetConsumedMessages *mKafkaClientMockGetConsumedMessages) Expect() *mKafkaClientMockGetConsumedMessages {
	if mmGetConsumedMessages.mock.funcGetConsumedMessages != nil {
		mmGetConsumedMessages.mock.t.Fatalf("KafkaClientMock.GetConsumedMessages mock is already set by Set")
	}

	if mmGetConsumedMessages.defaultExpectation == nil {
		mmGetConsumedMessages.defaultExpectation = &KafkaClientMockGetConsumedMessagesExpectation{}
	}

	return mmGetConsumedMessages
}

// Inspect accepts an inspector function that has same arguments as the KafkaClient.GetConsumedMessages
func (mmGetConsumedMessages *mKafkaClientMockGetConsumedMessages) Inspect(f func()) *mKafkaClientMockGetConsumedMessages {
	if mmGetConsumedMessages.mock.inspectFuncGetConsumedMessages != nil {
		mmGetConsumedMessages.mock.t.Fatalf("Inspect function is already set for KafkaClientMock.GetConsumedMessages")
	}

	mmGetConsumedMessages.mock.inspectFuncGetConsumedMessages = f

	return mmGetConsumedMessages
}

// Return sets up results that will be returned by KafkaClient.GetConsumedMessages
func (mmGetConsumedMessages *mKafkaClientMockGetConsumedMessages) Return(mp1 *mm_kafka.MessageStore) *KafkaClientMock {
	if mmGetConsumedMessages.mock.funcGetConsumedMessages != nil {
		mmGetConsumedMessages.mock.t.Fatalf("KafkaClientMock.GetConsumedMessages mock is already set by Set")
	}

	if mmGetConsumedMessages.defaultExpectation == nil {
		mmGetConsumedMessages.defaultExpectation = &KafkaClientMockGetConsumedMessagesExpectation{mock: mmGetConsumedMessages.mock}
	}
	mmGetConsumedMessages.defaultExpectation.results = &KafkaClientMockGetConsumedMessagesResults{mp1}
	mmGetConsumedMessages.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetConsumedMessages.mock
}

// Set uses given function f to mock the KafkaClient.GetConsumedMessages method
func (mmGetConsumedMessages *mKafkaClientMockGetConsumedMessages) Set(f func() (mp1 *mm_kafka.MessageStore)) *KafkaClientMock {
	if mmGetConsumedMessages.defaultExpectation != nil {
		mmGetConsumedMessages.mock.t.Fatalf("Default expectation is already set for the KafkaClient.GetConsumedMessages method")
	}

	if len(mmGetConsumedMessages.expectations) > 0 {
		mmGetConsumedMessages.mock.t.Fatalf("Some expectations are already set for the KafkaClient.GetConsumedMessages method")
	}

	mmGetConsumedMessages.mock.funcGetConsumedMessages = f
	mmGetConsumedMessages.mock.funcGetConsumedMessagesOrigin = minimock.CallerInfo(1)
	return mmGetConsumedMessages.mock
}

// Times sets number of times KafkaClient.GetConsumedMessages should be invoked
func (mmGetConsumedMessages *mKafkaClientMockGetConsumedMessages) Times(n uint64) *mKafkaClientMockGetConsumedMessages {
	if n == 0 {
		mmGetConsumedMessages.mock.t.Fatalf("Times of KafkaClientMock.GetConsumedMessages mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetConsumedMessages.expectedInvocations, n)
	mmGetConsumedMessages.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetConsumedMessages
}

func (mmGetConsumedMessages *mKafkaClientMockGetConsumedMessages) invocationsDone() bool {
	if len(mmGetConsumedMessages.expectations) == 0 && mmGetConsumedMessages.defaultExpectation == nil && mmGetConsumedMessages.mock.funcGetConsumedMessages == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetConsumedMessages.mock.afterGetConsumedMessagesCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetConsumedMessages.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetConsumedMessages implements mm_kafka.KafkaClient
func (mmGetConsumedMessages *KafkaClientMock) GetConsumedMessages() (mp1 *mm_kafka.MessageStore) {
	mm_atomic.AddUint64(&mmGetConsumedMessages.beforeGetConsumedMessagesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetConsumedMessages.afterGetConsumedMessagesCounter, 1)

	mmGetConsumedMessages.t.Helper()

	if mmGetConsumedMessages.inspectFuncGetConsumedMessages != nil {
		mmGetConsumedMessages.inspectFuncGetConsumedMessages()
	}

	if mmGetConsumedMessages.GetConsumedMessagesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetConsumedMessages.GetConsumedMessagesMock.defaultExpectation.Counter, 1)

		mm_results := mmGetConsumedMessages.GetConsumedMessagesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetConsumedMessages.t.Fatal("No results are set for the KafkaClientMock.GetConsumedMessages")
		}
		return (*mm_results).mp1
	}
	if mmGetConsumedMessages.funcGetConsumedMessages != nil {
		return mmGetConsumedMessages.funcGetConsumedMessages()
	}
	mmGetConsumedMessages.t.Fatalf("Unexpected call to KafkaClientMock.GetConsumedMessages.")
	return
}

// GetConsumedMessagesAfterCounter returns a count of finished KafkaClientMock.GetConsumedMessages invocations
func (mmGetConsumedMessages *KafkaClientMock) GetConsumedMessagesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetConsumedMessages.afterGetConsumedMessagesCounter)
}

// GetConsumedMessagesBeforeCounter returns a count of KafkaClientMock.GetConsumedMessages invocations
func (mmGetConsumedMessages *KafkaClientMock) GetConsumedMessagesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetConsumedMessages.beforeGetConsumedMessagesCounter)
}

// MinimockGetConsumedMessagesDone returns true if the count of the GetConsumedMessages invocations corresponds
// the number of defined expectations
func (m *KafkaClientMock) MinimockGetConsumedMessagesDone() bool {
	if m.GetConsumedMessagesMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetConsumedMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetConsumedMessagesMock.invocationsDone()
}

// MinimockGetConsumedMessagesInspect logs each unmet expectation
func (m *KafkaClientMock) MinimockGetConsumedMessagesInspect() {
	for _, e := range m.GetConsumedMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to KafkaClientMock.GetConsumedMessages")
		}
	}

	afterGetConsumedMessagesCounter := mm_atomic.LoadUint64(&m.afterGetConsumedMessagesCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetConsumedMessagesMock.defaultExpectation != nil && afterGetConsumedMessagesCounter < 1 {
		m.t.Errorf("Expected call to KafkaClientMock.GetConsumedMessages at\n%s", m.GetConsumedMessagesMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetConsumedMessages != nil && afterGetConsumedMessagesCounter < 1 {
		m.t.Errorf("Expected call to KafkaClientMock.GetConsumedMessages at\n%s", m.funcGetConsumedMessagesOrigin)
	}

	if !m.GetConsumedMessagesMock.invocationsDone() && afterGetConsumedMessagesCounter > 0 {
		m.t.Errorf("Expected %d calls to KafkaClientMock.GetConsumedMessages at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetConsumedMessagesMock.expectedInvocations), m.GetConsumedMessagesMock.expectedInvocationsOrigin, afterGetConsumedMessagesCounter)
	}
}

type mKafkaClientMockProduceMessages struct {
	optional           bool
	mock               *KafkaClientMock
	defaultExpectation *KafkaClientMockProduceMessagesExpectation
	expectations       []*KafkaClientMockProduceMessagesExpectation

	callArgs []*KafkaClientMockProduceMessagesParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// KafkaClientMockProduceMessagesExpectation specifies expectation struct of the KafkaClient.ProduceMessages
type KafkaClientMockProduceMessagesExpectation struct {
	mock               *KafkaClientMock
	params             *KafkaClientMockProduceMessagesParams
	paramPtrs          *KafkaClientMockProduceMessagesParamPtrs
	expectationOrigins KafkaClientMockProduceMessagesExpectationOrigins
	results            *KafkaClientMockProduceMessagesResults
	returnOrigin       string
	Counter            uint64
}

// KafkaClientMockProduceMessagesParams contains parameters of the KafkaClient.ProduceMessages
type KafkaClientMockProduceMessagesParams struct {
	ctx      context.Context
	messages []kafka.Message
}

// KafkaClientMockProduceMessagesParamPtrs contains pointers to parameters of the KafkaClient.ProduceMessages
type KafkaClientMockProduceMessagesParamPtrs struct {
	ctx      *context.Context
	messages *[]kafka.Message
}

// KafkaClientMockProduceMessagesResults contains results of the KafkaClient.ProduceMessages
type KafkaClientMockProduceMessagesResults struct {
	err error
}

// KafkaClientMockProduceMessagesOrigins contains origins of expectations of the KafkaClient.ProduceMessages
type KafkaClientMockProduceMessagesExpectationOrigins struct {
	origin         string
	originCtx      string
	originMessages string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmProduceMessages *mKafkaClientMockProduceMessages) Optional() *mKafkaClientMockProduceMessages {
	mmProduceMessages.optional = true
	return mmProduceMessages
}

// Expect sets up expected params for KafkaClient.ProduceMessages
func (mmProduceMessages *mKafkaClientMockProduceMessages) Expect(ctx context.Context, messages ...kafka.Message) *mKafkaClientMockProduceMessages {
	if mmProduceMessages.mock.funcProduceMessages != nil {
		mmProduceMessages.mock.t.Fatalf("KafkaClientMock.ProduceMessages mock is already set by Set")
	}

	if mmProduceMessages.defaultExpectation == nil {
		mmProduceMessages.defaultExpectation = &KafkaClientMockProduceMessagesExpectation{}
	}

	if mmProduceMessages.defaultExpectation.paramPtrs != nil {
		mmProduceMessages.mock.t.Fatalf("KafkaClientMock.ProduceMessages mock is already set by ExpectParams functions")
	}

	mmProduceMessages.defaultExpectation.params = &KafkaClientMockProduceMessagesParams{ctx, messages}
	mmProduceMessages.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmProduceMessages.expectations {
		if minimock.Equal(e.params, mmProduceMessages.defaultExpectation.params) {
			mmProduceMessages.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmProduceMessages.defaultExpectation.params)
		}
	}

	return mmProduceMessages
}

// ExpectCtxParam1 sets up expected param ctx for KafkaClient.ProduceMessages
func (mmProduceMessages *mKafkaClientMockProduceMessages) ExpectCtxParam1(ctx context.Context) *mKafkaClientMockProduceMessages {
	if mmProduceMessages.mock.funcProduceMessages != nil {
		mmProduceMessages.mock.t.Fatalf("KafkaClientMock.ProduceMessages mock is already set by Set")
	}

	if mmProduceMessages.defaultExpectation == nil {
		mmProduceMessages.defaultExpectation = &KafkaClientMockProduceMessagesExpectation{}
	}

	if mmProduceMessages.defaultExpectation.params != nil {
		mmProduceMessages.mock.t.Fatalf("KafkaClientMock.ProduceMessages mock is already set by Expect")
	}

	if mmProduceMessages.defaultExpectation.paramPtrs == nil {
		mmProduceMessages.defaultExpectation.paramPtrs = &KafkaClientMockProduceMessagesParamPtrs{}
	}
	mmProduceMessages.defaultExpectation.paramPtrs.ctx = &ctx
	mmProduceMessages.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmProduceMessages
}

// ExpectMessagesParam2 sets up expected param messages for KafkaClient.ProduceMessages
func (mmProduceMessages *mKafkaClientMockProduceMessages) ExpectMessagesParam2(messages ...kafka.Message) *mKafkaClientMockProduceMessages {
	if mmProduceMessages.mock.funcProduceMessages != nil {
		mmProduceMessages.mock.t.Fatalf("KafkaClientMock.ProduceMessages mock is already set by Set")
	}

	if mmProduceMessages.defaultExpectation == nil {
		mmProduceMessages.defaultExpectation = &KafkaClientMockProduceMessagesExpectation{}
	}

	if mmProduceMessages.defaultExpectation.params != nil {
		mmProduceMessages.mock.t.Fatalf("KafkaClientMock.ProduceMessages mock is already set by Expect")
	}

	if mmProduceMessages.defaultExpectation.paramPtrs == nil {
		mmProduceMessages.defaultExpectation.paramPtrs = &KafkaClientMockProduceMessagesParamPtrs{}
	}
	mmProduceMessages.defaultExpectation.paramPtrs.messages = &messages
	mmProduceMessages.defaultExpectation.expectationOrigins.originMessages = minimock.CallerInfo(1)

	return mmProduceMessages
}

// Inspect accepts an inspector function that has same arguments as the KafkaClient.ProduceMessages
func (mmProduceMessages *mKafkaClientMockProduceMessages) Inspect(f func(ctx context.Context, messages ...kafka.Message)) *mKafkaClientMockProduceMessages {
	if mmProduceMessages.mock.inspectFuncProduceMessages != nil {
		mmProduceMessages.mock.t.Fatalf("Inspect function is already set for KafkaClientMock.ProduceMessages")
	}

	mmProduceMessages.mock.inspectFuncProduceMessages = f

	return mmProduceMessages
}

// Return sets up results that will be returned by KafkaClient.ProduceMessages
func (mmProduceMessages *mKafkaClientMockProduceMessages) Return(err error) *KafkaClientMock {
	if mmProduceMessages.mock.funcProduceMessages != nil {
		mmProduceMessages.mock.t.Fatalf("KafkaClientMock.ProduceMessages mock is already set by Set")
	}

	if mmProduceMessages.defaultExpectation == nil {
		mmProduceMessages.defaultExpectation = &KafkaClientMockProduceMessagesExpectation{mock: mmProduceMessages.mock}
	}
	mmProduceMessages.defaultExpectation.results = &KafkaClientMockProduceMessagesResults{err}
	mmProduceMessages.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmProduceMessages.mock
}

// Set uses given function f to mock the KafkaClient.ProduceMessages method
func (mmProduceMessages *mKafkaClientMockProduceMessages) Set(f func(ctx context.Context, messages ...kafka.Message) (err error)) *KafkaClientMock {
	if mmProduceMessages.defaultExpectation != nil {
		mmProduceMessages.mock.t.Fatalf("Default expectation is already set for the KafkaClient.ProduceMessages method")
	}

	if len(mmProduceMessages.expectations) > 0 {
		mmProduceMessages.mock.t.Fatalf("Some expectations are already set for the KafkaClient.ProduceMessages method")
	}

	mmProduceMessages.mock.funcProduceMessages = f
	mmProduceMessages.mock.funcProduceMessagesOrigin = minimock.CallerInfo(1)
	return mmProduceMessages.mock
}

// When sets expectation for the KafkaClient.ProduceMessages which will trigger the result defined by the following
// Then helper
func (mmProduceMessages *mKafkaClientMockProduceMessages) When(ctx context.Context, messages ...kafka.Message) *KafkaClientMockProduceMessagesExpectation {
	if mmProduceMessages.mock.funcProduceMessages != nil {
		mmProduceMessages.mock.t.Fatalf("KafkaClientMock.ProduceMessages mock is already set by Set")
	}

	expectation := &KafkaClientMockProduceMessagesExpectation{
		mock:               mmProduceMessages.mock,
		params:             &KafkaClientMockProduceMessagesParams{ctx, messages},
		expectationOrigins: KafkaClientMockProduceMessagesExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmProduceMessages.expectations = append(mmProduceMessages.expectations, expectation)
	return expectation
}

// Then sets up KafkaClient.ProduceMessages return parameters for the expectation previously defined by the When method
func (e *KafkaClientMockProduceMessagesExpectation) Then(err error) *KafkaClientMock {
	e.results = &KafkaClientMockProduceMessagesResults{err}
	return e.mock
}

// Times sets number of times KafkaClient.ProduceMessages should be invoked
func (mmProduceMessages *mKafkaClientMockProduceMessages) Times(n uint64) *mKafkaClientMockProduceMessages {
	if n == 0 {
		mmProduceMessages.mock.t.Fatalf("Times of KafkaClientMock.ProduceMessages mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmProduceMessages.expectedInvocations, n)
	mmProduceMessages.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmProduceMessages
}

func (mmProduceMessages *mKafkaClientMockProduceMessages) invocationsDone() bool {
	if len(mmProduceMessages.expectations) == 0 && mmProduceMessages.defaultExpectation == nil && mmProduceMessages.mock.funcProduceMessages == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmProduceMessages.mock.afterProduceMessagesCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmProduceMessages.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ProduceMessages implements mm_kafka.KafkaClient
func (mmProduceMessages *KafkaClientMock) ProduceMessages(ctx context.Context, messages ...kafka.Message) (err error) {
	mm_atomic.AddUint64(&mmProduceMessages.beforeProduceMessagesCounter, 1)
	defer mm_atomic.AddUint64(&mmProduceMessages.afterProduceMessagesCounter, 1)

	mmProduceMessages.t.Helper()

	if mmProduceMessages.inspectFuncProduceMessages != nil {
		mmProduceMessages.inspectFuncProduceMessages(ctx, messages...)
	}

	mm_params := KafkaClientMockProduceMessagesParams{ctx, messages}

	// Record call args
	mmProduceMessages.ProduceMessagesMock.mutex.Lock()
	mmProduceMessages.ProduceMessagesMock.callArgs = append(mmProduceMessages.ProduceMessagesMock.callArgs, &mm_params)
	mmProduceMessages.ProduceMessagesMock.mutex.Unlock()

	for _, e := range mmProduceMessages.ProduceMessagesMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmProduceMessages.ProduceMessagesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmProduceMessages.ProduceMessagesMock.defaultExpectation.Counter, 1)
		mm_want := mmProduceMessages.ProduceMessagesMock.defaultExpectation.params
		mm_want_ptrs := mmProduceMessages.ProduceMessagesMock.defaultExpectation.paramPtrs

		mm_got := KafkaClientMockProduceMessagesParams{ctx, messages}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmProduceMessages.t.Errorf("KafkaClientMock.ProduceMessages got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmProduceMessages.ProduceMessagesMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.messages != nil && !minimock.Equal(*mm_want_ptrs.messages, mm_got.messages) {
				mmProduceMessages.t.Errorf("KafkaClientMock.ProduceMessages got unexpected parameter messages, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmProduceMessages.ProduceMessagesMock.defaultExpectation.expectationOrigins.originMessages, *mm_want_ptrs.messages, mm_got.messages, minimock.Diff(*mm_want_ptrs.messages, mm_got.messages))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmProduceMessages.t.Errorf("KafkaClientMock.ProduceMessages got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmProduceMessages.ProduceMessagesMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmProduceMessages.ProduceMessagesMock.defaultExpectation.results
		if mm_results == nil {
			mmProduceMessages.t.Fatal("No results are set for the KafkaClientMock.ProduceMessages")
		}
		return (*mm_results).err
	}
	if mmProduceMessages.funcProduceMessages != nil {
		return mmProduceMessages.funcProduceMessages(ctx, messages...)
	}
	mmProduceMessages.t.Fatalf("Unexpected call to KafkaClientMock.ProduceMessages. %v %v", ctx, messages)
	return
}

// ProduceMessagesAfterCounter returns a count of finished KafkaClientMock.ProduceMessages invocations
func (mmProduceMessages *KafkaClientMock) ProduceMessagesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProduceMessages.afterProduceMessagesCounter)
}

// ProduceMessagesBeforeCounter returns a count of KafkaClientMock.ProduceMessages invocations
func (mmProduceMessages *KafkaClientMock) ProduceMessagesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProduceMessages.beforeProduceMessagesCounter)
}

// Calls returns a list of arguments used in each call to KafkaClientMock.ProduceMessages.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmProduceMessages *mKafkaClientMockProduceMessages) Calls() []*KafkaClientMockProduceMessagesParams {
	mmProduceMessages.mutex.RLock()

	argCopy := make([]*KafkaClientMockProduceMessagesParams, len(mmProduceMessages.callArgs))
	copy(argCopy, mmProduceMessages.callArgs)

	mmProduceMessages.mutex.RUnlock()

	return argCopy
}

// MinimockProduceMessagesDone returns true if the count of the ProduceMessages invocations corresponds
// the number of defined expectations
func (m *KafkaClientMock) MinimockProduceMessagesDone() bool {
	if m.ProduceMessagesMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ProduceMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ProduceMessagesMock.invocationsDone()
}

// MinimockProduceMessagesInspect logs each unmet expectation
func (m *KafkaClientMock) MinimockProduceMessagesInspect() {
	for _, e := range m.ProduceMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to KafkaClientMock.ProduceMessages at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterProduceMessagesCounter := mm_atomic.LoadUint64(&m.afterProduceMessagesCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ProduceMessagesMock.defaultExpectation != nil && afterProduceMessagesCounter < 1 {
		if m.ProduceMessagesMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to KafkaClientMock.ProduceMessages at\n%s", m.ProduceMessagesMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to KafkaClientMock.ProduceMessages at\n%s with params: %#v", m.ProduceMessagesMock.defaultExpectation.expectationOrigins.origin, *m.ProduceMessagesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProduceMessages != nil && afterProduceMessagesCounter < 1 {
		m.t.Errorf("Expected call to KafkaClientMock.ProduceMessages at\n%s", m.funcProduceMessagesOrigin)
	}

	if !m.ProduceMessagesMock.invocationsDone() && afterProduceMessagesCounter > 0 {
		m.t.Errorf("Expected %d calls to KafkaClientMock.ProduceMessages at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ProduceMessagesMock.expectedInvocations), m.ProduceMessagesMock.expectedInvocationsOrigin, afterProduceMessagesCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *KafkaClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockConsumeMessagesInspect()

			m.MinimockGetConsumedMessagesInspect()

			m.MinimockProduceMessagesInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *KafkaClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *KafkaClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockConsumeMessagesDone() &&
		m.MinimockGetConsumedMessagesDone() &&
		m.MinimockProduceMessagesDone()
}
